{"version":3,"sources":["node_modules/browser-pack/_prelude.js","browser.js","src/capture-stack-client.js","src/errors.js","src/errors/auth-error.js","src/errors/dev-error.js","src/errors/not-found-error.js","src/errors/notify-user.js","src/errors/service-error.js","src/errors/user-error.js","src/inherits-client.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Errors","exportFn","ErrorsBase","captureStackTrace","inst","stack","name","message","safe_message","SuperErrors","fn","apply","this","arguments","setSuperErrorsFn","error_fn","setFn","add","addError","extend","extendError","getCustomStack","rebase","rebaseError","json","errorToJSON","base","field","err","throwing","errors","undefined","generic","indexOf","push","fields","constructor","default_message","status_code","client_safe_messages","parent","isSuperErrors","inherits","prototype","client_safe_message","isGeneric","setGeneric","init","initError","include_sub_errors","Array","isArray","getErrorStack","from","additional","getSubStack","JSON","stringify","super_stack","error_stack","prefix","substack","replace","LINE_RETURNS","error_from","Object","defineProperty","get","enumerable","configurable","value","val","old_base","new_base","concat","map","exclude","mapped","submap","subfield","errors.client_safe_message","fields.client_safe_message","slice","type","substr","merge","b","exportsFn","AuthError","from_error","DevError","NotFoundError","NotifyUser","ServiceError","UserError","inheritsFromError","super_","create","writable"],"mappings":"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","file":"super-errors.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\n// base\r\nvar Errors = module.exports = require('./src/errors.js')();\r\n\r\n// inherits from Error\r\nrequire('./src/inherits-client.js')(Errors);\r\nrequire('./src/capture-stack-client.js')(Errors);\r\n\r\n// default classes\r\nrequire('./src/errors/auth-error.js')(Errors);\r\nrequire('./src/errors/dev-error.js')(Errors);\r\nrequire('./src/errors/not-found-error.js')(Errors);\r\nrequire('./src/errors/notify-user.js')(Errors);\r\nrequire('./src/errors/service-error.js')(Errors);\r\nrequire('./src/errors/user-error.js')(Errors);","\"use strict\";\n\nmodule.exports = exportFn;\n\nfunction exportFn(ErrorsBase){\n    ErrorsBase.captureStackTrace = captureStackTrace;\n}\n\nfunction captureStackTrace(inst){\n    // going to get the stack trace of an error\n    inst.stack = (new Error(\"\" + (inst.name ? inst.name + ': ' : '') + (inst.message || inst.safe_message))).stack;\n}","\"use strict\";\n\nmodule.exports = exportFn;\n\nvar LINE_RETURNS = /(\\r\\n|\\r|\\n)/g;\n\nfunction exportFn(){\n    var fn;\n    \n    /**\n     * Main export is a function that can be overridden by using setFn()\n     */\n    function SuperErrors(){\n        if(typeof fn === 'function'){\n            return fn.apply(this, arguments);\n        }\n    }\n    \n    /**\n     * Pass a function to set the behavior of the SuperErrors function\n     * @param {function} error_fn - function to be called when SuperErrors() is called\n     */\n    function setSuperErrorsFn(error_fn){\n        fn = error_fn;\n    }\n    \n    SuperErrors.setFn = setSuperErrorsFn;\n    SuperErrors.add = addError;\n    SuperErrors.extend = extendError;\n    SuperErrors.stack = getCustomStack;\n    SuperErrors.rebase = rebaseError;\n    SuperErrors.json = errorToJSON;\n    \n    return SuperErrors;\n}\n\n/**\n * Call to add an error to a base error.\n * @param {Error} base - the base error\n * @param {string} [field] - the field that this error was a result of\n * @param {Error} err - the error that occurred\n */\nfunction addError(base, field, err){\n    // field is optional\n    if(arguments.length === 2){\n        err = field;\n        field = err.field;\n    }\n    \n    if(base === err){\n        return base;\n    }\n    \n    if(!base || typeof base !== 'object'){\n        var throwing = new Error('Cannot add error to non object');\n        throwing.errors = [err];\n        throw throwing;\n    }\n    \n    var f;\n    \n    if(field === undefined){\n        if(!err.generic){\n            if(base.generic){\n                return rebaseError(base, err);\n            } else {\n                if(!base.errors){\n                    base.errors = [err];\n                } else {\n                    if(!~base.errors.indexOf(err)){\n                        base.errors.push(err);\n                    }\n                }\n            }\n        }\n        \n        if(err.errors){\n            for(f = 0; f < err.errors.length; f++){\n                base = addError(base, err.errors[f]);\n            }\n        }\n        \n        if(err.fields){\n            for(f in err.fields){\n                base = addError(base, f, err.fields[f]);\n            }\n        }\n    } else {\n        if(!base.fields){\n            base.fields = {};\n        }\n        \n        if(base.fields[field]){\n            if(!err.generic && base.fields[field].generic){\n                base.fields[field] = rebaseError(base.fields[field], err);\n            } else {\n                base.fields[field] = addError(base.fields[field], err);\n            }\n        } else {\n            base.fields[field] = err;\n        }\n        \n        if(err.fields){\n            for(f in err.fields){\n                base = addError(base, field + '.' + f, err.fields[f]);\n            }\n        }\n    }\n    \n    return base;\n}\n\n/**\n * Create a new Super Error\n * @param {Function} constructor - Constructor function for the error\n * @param {string} name - The error name (ex: AuthError, UserError)\n * @param {string} [default_message=\"There was an error.\"] - The message to display when no message is passed or when custom messages are defined as not client-safe\n * @param {number} [status_code=500] - The recommended HTTP status code to return to the user\n * @param {boolean} [client_safe_messages=false] - Whether or not messages should be sent back to the user or just the default message\n * @returns {Function}\n */\nfunction extendError(constructor, name, default_message, status_code, client_safe_messages){\n    /*jshint validthis:true */\n    \n    // optional default message\n    if(typeof default_message === 'number' || typeof default_message === 'boolean'){\n        client_safe_messages = status_code;\n        status_code = default_message;\n        default_message = undefined;\n    }\n    \n    // optional status code\n    if(typeof status_code === 'boolean'){\n        client_safe_messages = status_code;\n        status_code = undefined;\n    }\n    \n    var parent = (isSuperErrors(this) ? undefined : this);\n    var base = (parent ? parent.base : this);\n    \n    if(base.inherits){\n        base.inherits(constructor, (parent ? parent : Error));\n    }\n    \n    if(parent){\n        if(default_message === undefined){\n            default_message = parent.prototype.message;\n        }\n        \n        if(client_safe_messages === undefined){\n            client_safe_messages = parent.client_safe_messages;\n        }\n        \n        if(status_code === undefined){\n            status_code = parent.prototype.status_code;\n        }\n        \n        parent.base[name] = constructor;\n    } else {\n        this[name] = constructor;\n    }\n    \n    default_message = default_message || 'There was an error.';\n    \n    constructor.prototype.name = name;\n    constructor.prototype.message = default_message;\n    constructor.prototype.client_safe_message = default_message;\n    constructor.prototype.status_code = (status_code && typeof status_code === 'number' ? status_code : 500);\n    constructor.prototype.isGeneric = setGeneric;\n    constructor.prototype.init = initError;\n    \n    constructor.base = this;\n    constructor.client_safe_messages = (client_safe_messages ? true : false);\n    constructor.extend = this.extend;\n    \n    return constructor;\n}\n\n/**\n * Will return a stack with additional info, fields, and errors that are attached to this error\n * @param {Error} err - The error to get the stack from\n * @param {boolean} [include_sub_errors=true] - Whether the stack should include sub errors\n * @returns {string}\n */\nfunction getCustomStack(err, include_sub_errors){\n    /*jshint validthis:true */ \n    var SuperErrors = this;\n    \n    if(Array.isArray(err) && err.length > 0){\n        err = {\n            name: 'Array',\n            message: '',\n            errors: err\n        };\n    }\n    \n    var stack = getErrorStack(err);\n    \n    if(err && (err.from || err.additional || (include_sub_errors !== false && (err.errors || err.fields)))){\n        stack += '\\n    ---';\n        \n        if(err.additional){\n            try {\n                stack += getSubStack('additional info', JSON.stringify(err.additional, null, '    '));\n            } catch(err){\n                stack += getSubStack('additional info error', err.message);\n            }\n        }\n    \n        if(err.from){\n            stack += getSubStack('from', SuperErrors.stack(err.from, false));\n        }\n        \n        if(include_sub_errors !== false){\n            if(err.errors && Array.isArray(err.errors)){\n                for(var i = 0; i < err.errors.length; i++){\n                    stack += getSubStack('additional error', SuperErrors.stack(err.errors[i], false));\n                }\n            }\n            \n            if(include_sub_errors !== 'addl' && err.fields && typeof err.fields === 'object'){\n                for(var field in err.fields){\n                    stack += getSubStack(field, SuperErrors.stack(err.fields[field], 'addl'));\n                }\n            }\n        }\n    }\n    \n    return stack;\n}\n\n/**\n * Gets the stack of the error value\n * @param {Error} err - The error value to get the stack from\n * @returns {string}\n */\nfunction getErrorStack(err){\n    var stack;\n    \n    if(!err || typeof err !== 'object' || Array.isArray(err)){\n        try {\n            if(err === undefined){\n                err = 'undefined';\n            }\n            else if(typeof err === 'function'){\n                err = '[function]';\n            } else {\n                err = JSON.stringify(err);\n            }\n        } catch(e){\n            /* istanbul ignore next */\n            err = '' + err;\n        }\n        err = { name:'UnknownError', message: '' + err + '.' };\n    }\n    \n    if(!err.super_stack){\n        stack = err.stack;\n    } else {\n        stack = err.error_stack;\n    }\n    \n    if(!stack){\n        stack = (err.name ? err.name + ': ' : 'UnknownError: ');\n        if('message' in err){\n            stack += err.message;\n        } else {\n            try {\n                stack += JSON.stringify(err) + '.';\n            } catch(e){\n                stack += '' + err + '.';\n            }\n        }\n    }\n    \n    return stack;\n}\n\n/**\n * Indents a substack string\n * @param {string} prefix - The substack title\n * @param {string} stack - The substack\n * @returns {string}\n */\nfunction getSubStack(prefix, stack){\n    var substack = '\\n' + prefix + ': ' + stack;\n    return substack.replace(LINE_RETURNS, '\\n    ');\n}\n\n/**\n * Initialize an error based on arguments passed\n * @param {Function} constructor - Error constructor to use\n * @param {string} [message] - Error message\n * @param {*} [additional] - Additional information to be attached to the error\n * @param {Error} [error_from] - Error we want to wrap with our SuperError\n * @param {string} [field] - Field we want this error to be associated with\n */\nfunction initError(constructor, message, additional, error_from, field){\n    /*jshint validthis:true */\n    var inst = this;\n    var SuperErrors = constructor.base;\n    \n    // optional additional information\n    if(additional instanceof Error){\n        field = error_from;\n        error_from = additional;\n        additional = undefined;\n    }\n    \n    // optional error_from\n    else if(typeof error_from === 'string'){\n        field = error_from;\n        error_from = undefined;\n    }\n    \n    if(message){\n        this.message = '' + message;\n        \n        if(constructor.client_safe_messages){\n            this.client_safe_message = '' + message;\n        }\n    }\n    \n    if(error_from){\n        this.from = error_from;\n    }\n    \n    if(additional !== undefined && additional !== null){\n        this.additional = additional;\n    }\n    \n    if(field && typeof field === 'string'){\n        this.field = field;\n    }\n    \n    if(SuperErrors && SuperErrors.captureStackTrace){\n        SuperErrors.captureStackTrace(this, constructor);\n        this.error_stack = this.stack;\n    }\n    \n    Object.defineProperty(this, 'stack', {\n        get: function(){\n            return SuperErrors.stack(inst);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    \n    Object.defineProperty(this, 'super_stack', {\n        value: true,\n        enumerable: false,\n        configurable: true\n    });\n    \n    return this;\n}\n\n/**\n * Does the value look like a SuperErrors instance?\n * @param {*} val - Value to test\n * @returns {boolean}\n */\nfunction isSuperErrors(val){\n    if(val && typeof val.setFn === 'function' && typeof val.add === 'function' && typeof val.extend === 'function' && typeof val.rebase === 'function'){\n        return true;\n    }\n}\n\n/**\n * Set a new error as the base error and attach the existing base error to the new base\n * @param {Error} old_base - The old base error\n * @param {Error} new_base - The new base error\n * @returns {Error}\n */\nfunction rebaseError(old_base, new_base){\n    // strip the errors and fields\n    var errors, fields, field;\n    \n    if(new_base.errors){\n        errors = new_base.errors;\n        delete new_base.errors;\n    }\n    \n    if(new_base.fields){\n        fields = new_base.fields;\n        delete new_base.fields;\n    }\n    \n    new_base = addError(new_base, old_base);\n    \n    // now add the errors back\n    if(errors){\n        new_base.errors = new_base.errors.concat(errors);\n    }\n    \n    // and add the fields back\n    if(fields){\n        for(field in fields){\n            new_base = addError(new_base, field, fields[field]);\n        }\n    }\n    \n    return new_base;\n}\n\n/**\n * Map the error to a json stringifiable object. By default, use the `client_safe_message` as the message.\n * @param {Error} err - The error to convert to json\n * @param {Object} map - How to map the error values\n * @param {Object} exclude - Error properties to always exclude\n * @returns {Object}\n */\nfunction errorToJSON(err, map, exclude){\n    var json = {};\n    var mapped, i, a, submap, subfield;\n    \n    if(!exclude || typeof exclude !== 'object'){\n        exclude = {};\n    }\n    \n    if(map === 'all'){\n        map = {\n            message: 'message',\n            client_safe_message: 'client_safe_message',\n            errors: 'errors',\n            field: 'field',\n            fields: 'fields',\n            from: 'from',\n            name: 'name',\n            stack: 'stack',\n            status_code: 'status_code'\n        };\n    }\n    \n    else if(!map || typeof map !== 'object'){\n        map = {\n            \"client_safe_message\": 'message',\n            \"errors.client_safe_message\": 'errors',\n            \"field\": 'field',\n            \"fields.client_safe_message\": 'fields',\n            \"name\": 'name',\n            \"status_code\": 'status_code'\n        };\n    }\n    \n    if(Array.isArray(err)){\n        // grab the first and convert the others to additional errors\n        a = err.slice(1);\n        err = err[0];\n        if(err && typeof err === 'object'){\n            if(Array.isArray(err)){\n                err = { name:'UnknownError', message: '[array of arrays]' };\n            }\n            for(i = 0; i < a.length; i++){\n                err = addError(err, a[i]);\n            }\n        }\n    }\n    \n    if(!err || typeof err !== 'object'){\n        if(typeof err === 'function'){\n            err = '[function]';\n        }\n        err = { \n            type: 'UnknownError',\n            message: err\n        };\n    }\n    \n    for(var field in map){\n        mapped = map[field];\n        i = field.indexOf('.');\n        \n        if(~i){\n            subfield = field.substr(i + 1);\n            field = field.substr(0, i);\n        } else {\n            subfield = undefined;\n        }\n        \n        if(field in exclude && exclude[field] === true){\n            continue;\n        }\n        \n        if(field === 'stack'){\n            json[mapped] = getErrorStack(err);\n            continue;\n        }\n        \n        if(field in err){\n            switch(field){\n                case 'from':\n                    if(subfield){\n                        submap = {};\n                        submap[subfield] = subfield;\n                        json[mapped] = errorToJSON(err.from, submap)[subfield];    \n                    } else {\n                        json[mapped] = errorToJSON(err.from, map, merge(exclude, ('from' in exclude ? exclude.from : { fields:true, errors:true, status_code:true })));\n                    }\n                    break;\n                case 'errors':\n                    if(subfield){\n                        submap = {};\n                        submap[subfield] = subfield; \n                    }\n                    if(err.errors.length > 0){\n                        a = [];\n                        for(i = 0; i < err.errors.length; i++){\n                            if(subfield){\n                                a[i] = errorToJSON(err.errors[i], submap)[subfield];  \n                            } else {\n                                a[i] = errorToJSON(err.errors[i], map, merge(exclude, ('errors' in exclude ? exclude.errors : { fields:true, errors:true, status_code:true })));\n                            }\n                        }\n                        json[mapped] = a;\n                    }\n                    break;\n                case 'fields':\n                    if(subfield){\n                        submap = {};\n                        submap[subfield] = subfield;\n                    }\n                    a = {};\n                    for(i in err.fields){\n                        if(subfield){\n                            a[i] = errorToJSON(err.fields[i], submap)[subfield];  \n                        } else {\n                            a[i] = errorToJSON(err.fields[i], map, merge(exclude, ('fields' in exclude ? exclude.fields : { fields:true, status_code:true })));\n                        }\n                    }\n                    json[mapped] = a;\n                    break;\n                default:\n                    json[mapped] = err[field];\n            }\n        } else {\n            switch(field){\n                case 'client_safe_message':\n                case 'message':\n                    json[mapped] = 'There was an error.';\n                    break;\n                case 'name':\n                    json[mapped] = 'UnknownError';\n                    break;\n                case 'status_code':\n                    json[mapped] = 500;\n                    break;\n            }\n        }\n    }\n    return json;\n}\n\n/**\n * Simply merge one object into another\n * @param {Object} a - Object to copy\n * @param {Object} b - Object params will override a's params\n * @returns {Object}\n */\nfunction merge(a, b){\n    var r = {}, f;\n    for(f in a) r[f] = a[f];\n    for(f in b) r[f] = b[f];\n    return r;\n}\n\n/**\n * Chainable function to be attached to all SuperErrors\n * @param {boolean} [value=true] - Whether or the Error is generic\n * @returns {Error}\n */\nfunction setGeneric(value){\n    /* jshint validthis:true */\n    this.generic = (value !== false);\n    return this;\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function AuthError(message, additional, from_error, field){\n        this.init(AuthError, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(AuthError, 'AuthError', 'Authorization required.', 401, true);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function DevError(message, additional, from_error, field){\n        return this.init(DevError, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(DevError, 'DevError', 'Bad setup on server.', 500);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function NotFoundError(message, additional, from_error, field){\n        return this.init(NotFoundError, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(NotFoundError, 'NotFoundError', 'Not found.', 404, true);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function NotifyUser(message, additional, from_error, field){\n        return this.init(NotifyUser, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(NotifyUser, 'NotifyUser', 'A server error occurred.', 500, true);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function ServiceError(message, additional, from_error, field){\n        return this.init(ServiceError, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(ServiceError, 'ServiceError', 'Error from service providor.', 500, true);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    \n    function UserError(message, additional, from_error, field){\n        return this.init(UserError, message, additional, from_error, field);\n    }\n    \n    ErrorsBase.extend(UserError, 'UserError', 'Please check your input.', 400, true);\n}","\"use strict\";\n\nmodule.exports = exportsFn;\n\nfunction exportsFn(ErrorsBase){\n    ErrorsBase.inherits = inheritsFromError;\n}\n\nfunction inheritsFromError(constructor, parent){\n    constructor.super_ = parent;\n    constructor.prototype = Object.create(parent.prototype, {\n        constructor: {\n            value: parent,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}"]}